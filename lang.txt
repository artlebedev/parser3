

        GET name's value
            
        	$name followed by whitespace
        	${name}followed by anything

        	name: name OR namepath
        	namepath: namepart.namepart....namepart
        	namepart: string OR $name OR string$name

        		samples:
	        		$name
    	    		$name.sub
					$name.sub1.sub2
					$name.sub$subvar
					$$subvar

        PUT a value into variable OR it's part

        	$name(value) < value into $name
        	$namepath.namepart(value) < value into namepart's part of $namepath


        	$name(
        		constructor: variable write context switched into $name
        	)
        	constructor: string OR complex object's constructor
            complex object's constructor: hash field assignment & Co

            	samples:
            		$var(value)
            		$hash_name($key(value))

        WITH assignes current read/write context

        	$namepath{
        		here read/write context switched into namepath
        	}

        		samples:
        			$organization.departments.fire_department{
						$some_machine1
						$some_machine2
        			}
                    is equial to:
                    	$organization.departments.fire_department.some_machine1
                    	$organization.departments.fire_department.some_machine2

        CALL block with parameters

        	^namepath parameters locals
            parameters: parameter OR parameter ... parameter
            parameter: (parameter_value_in_round) OR {parameter_value}
            parameter_value_in_round: parameter_value OR parameter_value;...;parameter_value

            () parameter value to name associated like constructor body to variable
            {} parameter value is a code, which would be executed at GET time, in stored-call-context

            locals: [local;local;...] local variables
            plus there's one predefined local var, named 'result'
            if someone assigns it, it would be the result of method

			samples:
				
				^func(parameter1;parameter2){parameter3}{parameter4}(parameter5;parameter6)

				@print[man] prints some man' params
				$man.name
				$man.age

                1: 
				$alex(
					$name(alex)
					$age(234)
				)
				^print($alex)

                2: 
				^print(
					$name(alex)
					$age(234)
				)

				@test[][i]
				$i(123) ^rem[this is local $i]
				$result[this would be the result]
				these chars ignored

		MODULES:

			a module is a file with some method-definitions and special-definitions

			method-definition:

				sign @ must be in column 1.

				@name[param1;param2;...][local1;local2;...] comment
				body

            special-definitions:

				@CLASS
				class_name

				@USES
				modules
				needed
				in
				this
				module

				@BASE
				base_class_name

			all files are modules.
			first module to load is file that user have requested,
			execution begins in last @main.
